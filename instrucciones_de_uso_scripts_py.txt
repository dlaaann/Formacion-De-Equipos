Este archivo está dedicado a explicar cómo usar/ejecutar correctamente los scripts del repositorio, correspondientes a las metaheurísticas/algoritmos de formación de equipos desarrollados. Para ello, por cada
script se proporciona un comando de ejemplo para su ejecución en la línea de comandos. Cabe recalcar también que para el desarrollo de todo el código se utilizó la versión 3.11 de Python.


GRASP.py
Para ejecutar correctamente este algoritmo, el comando a utilizar debe seguir una estructura como la del siguiente ejemplo:
  py GRASP.py --instancia "./instancias/instancia_40_5 (1).txt" --tiempo_limite 60 --lambda_ 0.8 --alfa 0.0 --estrategia_bl "first-improving"
El comando consta de cinco parámetros:
  --instancia: a este parámetro se le debe proporcionar la dirección de la instancia (en formato .txt) que queremos resolver, es decir, de la cual queremos formar equipos. La instancia debe contener las
  puntuaciones Belbin y el género de los individuos a agrupar, ya que dicha información es en la que el algoritmo se basa para crear equipos. También debe contener el número total de individuos y el tamaño
  deseado para los equipos a formar. Para mayor conocimiento sobre cómo debe estar organizada la información que debe contener la instancia, se recomienda observar la estructura de alguna de las instancias
  utilizadas para evaluar el rendimiento de los algoritmos en la formación de equipos, las cuales también están subidas al repositorio. Cabe aclarar que cualquier espacio observado entre el texto de una misma
  línea corresponde a una tabulación.
  --tiempo_límite: aquí se establece el tiempo límite de ejecución del algoritmo para que forme los equipos. Debe estar en segundos. Por ejemplo, si queremos que el algoritmo se ejecute durante un minuto, el
  valor que se debería proporcionar es 60.
  --lambda_: puede tomar valores entre 0 y 1. Sirve para determinar si queremos que el algoritmo se oriente hacia la formación de equipos cuya estructura favorezca más la cobertura de roles (> 0.5), el balance de
  géneros (< 0.5) o ambos aspectos en un grado similar (0.5).
  --alfa: este parámetro corresponde al parámetro alfa característico de la metaheurística GRASP, que puede tomar valores entre 0 y 1. Se recomienda utilizar valores bajos de este parámetro, ya que en esos casos
  el algoritmo tiende a ser más rápido para generar una solución de calidad.
  --estrategia_bl: aquí se establece la estrategia de la técnica de búsqueda local que integra la metaheurística GRASP. Puede tomar como valores "best-improving" o "first-improving". Se recomienda utilizar este
  último valor, ya que empleando dicha estrategia el algoritmo tiende a ser más rápido para generar una solución de calidad.


GA.py
Para ejecutar correctamente este algoritmo, el comando a utilizar debe seguir una estructura como la del siguiente ejemplo:
  py GA.py --instancia "./instancias/instancia_40_5 (1).txt" --tiempo_limite 60 --lambda_ 0.8
En este caso, el comando a utilizar consta de tres parámetros: --instancia, --tiempo_limite y --lambda_, cuyas funciones son análogas a lo explicado anteriormente.


Ambos algoritmos, una vez terminan de ejecutarse, generan una tupla de dos elementos:
  -Primer elemento: consiste en una lista de N elementos que indica cómo se han agrupado los N individuos. Es decir, cada posición de la lista se asocia con un alumno distinto, y el elemento o valor de dicha posición indica a qué equipo ha sido asignado.
  -Segundo elemento: consiste en una tupla de tres elementos que indican, respectivamente, la eficacia media de los equipos, y tanto el valor medio de la cobertura de roles como del balance de géneros alcanzado por los equipos. Cada uno de estos tres valores puede oscilar entre un mínimo de 0 y un máximo de 1. Cuanto más próximos estén a 1, mejor se estima que serán los equipos. La eficacia media de los equipos es una combinación lineal del valor medio de la cobertura de roles y del balance de géneros --> lambda_ * valor_medio_cobertura_de_roles + (1 - lambda_) * valor_medio_balance_de_generos.

También generan un texto relacionado con el primer elemento de la tupla anterior, es decir, la lista que indica cómo se han agrupado los N individuos. De este modo, dicho texto indica con palabras cuántos equipos se han formado en total y la composición de cada uno de ellos.

Por último, cabe destacar que estos algoritmos no han sido diseñados para controlar cualquier tipo de error, como por ejemplo, la introducción de valores incorrectos en los parámetros o instancias con una estructura distinta a la definida, entre otros. Por tanto, se recomienda atenerse a la introducción de los valores indicados para cada uno de los parámetros.
